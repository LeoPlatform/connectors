/*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */

/*
 * PEG Source

start = table / trx
table = "table" space s:schema "." t:tablename ":" space a:action ":" d:data {return {s:s, t:t, a:a, d:d};}
trx = trx_begin / trx_commit
trx_begin = "BEGIN" id:trx_id? {return {trx:"BEGIN", xid:id};}
trx_commit = "COMMIT" id:trx_id? tm:trx_tm? {return {trx:"COMMIT", xid:id, time:tm};}
trx_id = space t:[0-9]+ {return t.join('');}
trx_tm = space "(at " t:[^\)]+ ")" {return t.join('');}
space = " "+
schema = double_quote_escaped_string / dot_terminated_string
tablename = double_quote_escaped_string / colon_terminated_string
fieldname = double_quote_escaped_string / braket_start_terminated_string
datatype = "[" t:braket_end_terminated_string "[]]" {return t+"[]";} / "[" t:braket_end_terminated_string "]" {return t;}
value = "null" {return null;} / float / integer / "\'\'" &" " {return} / single_quote_escaped_string / space_terminated_string

float = left:[0-9]+ "." right:[0-9]+ { return parseFloat(left.join("") + "." +   right.join("")); }
integer = digits:[0-9]+ { return parseInt(digits.join(""), 10); }

double_quote_escaped_string = "\"" t:([^"]+ / [\r\n] / "\"\"" {return "\""})* "\"" {return t[0] ? t[0].join('') : '';}
single_quote_escaped_string = "'" t:([^'\\] / [\r\n] / "\\'" / "''" / "\\\"" / "\\n" / "\\t")* "'" {
	return t.join('');
}
dot_terminated_string = t:[^.]+ {return t.join('');}
space_terminated_string = t:[^ \t\r\n]+ {return t.join('');}
colon_terminated_string = t:[^:]+ {return t.join('');}
braket_start_terminated_string = t:[^\[]+ {return t.join('');}
braket_end_terminated_string = t:[^\]\[]+ {return t.join('');}
action = t:("INSERT" / "UPDATE" / "DELETE") {return t;}
datum = space f:fieldname t:datatype ":" v:value {return {n:f, t:t, v:v};}
data = space "(" t:[^))]+ ")" {return {type:"null", name:"message", value:t.join('')};} / datum+

 */

module.exports = /*
 * Generated by PEG.js 0.10.0.
 *
 * http://pegjs.org/
 */
(function() {
	"use strict";

	function peg$subclass(child, parent) {
		function ctor() { this.constructor = child; }
		ctor.prototype = parent.prototype;
		child.prototype = new ctor();
	}

	function peg$SyntaxError(message, expected, found, location) {
		this.message  = message;
		this.expected = expected;
		this.found    = found;
		this.location = location;
		this.name     = "SyntaxError";

		if (typeof Error.captureStackTrace === "function") {
			Error.captureStackTrace(this, peg$SyntaxError);
		}
	}

	peg$subclass(peg$SyntaxError, Error);

	peg$SyntaxError.buildMessage = function(expected, found) {
		var DESCRIBE_EXPECTATION_FNS = {
			literal: function(expectation) {
				return "\"" + literalEscape(expectation.text) + "\"";
			},

			"class": function(expectation) {
				var escapedParts = "",
					i;

				for (i = 0; i < expectation.parts.length; i++) {
					escapedParts += expectation.parts[i] instanceof Array
						? classEscape(expectation.parts[i][0]) + "-" + classEscape(expectation.parts[i][1])
						: classEscape(expectation.parts[i]);
				}

				return "[" + (expectation.inverted ? "^" : "") + escapedParts + "]";
			},

			any: function(expectation) {
				return "any character";
			},

			end: function(expectation) {
				return "end of input";
			},

			other: function(expectation) {
				return expectation.description;
			}
		};

		function hex(ch) {
			return ch.charCodeAt(0).toString(16).toUpperCase();
		}

		function literalEscape(s) {
			return s
				.replace(/\\/g, '\\\\')
				.replace(/"/g,  '\\"')
				.replace(/\0/g, '\\0')
				.replace(/\t/g, '\\t')
				.replace(/\n/g, '\\n')
				.replace(/\r/g, '\\r')
				.replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
				.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
		}

		function classEscape(s) {
			return s
				.replace(/\\/g, '\\\\')
				.replace(/\]/g, '\\]')
				.replace(/\^/g, '\\^')
				.replace(/-/g,  '\\-')
				.replace(/\0/g, '\\0')
				.replace(/\t/g, '\\t')
				.replace(/\n/g, '\\n')
				.replace(/\r/g, '\\r')
				.replace(/[\x00-\x0F]/g,          function(ch) { return '\\x0' + hex(ch); })
				.replace(/[\x10-\x1F\x7F-\x9F]/g, function(ch) { return '\\x'  + hex(ch); });
		}

		function describeExpectation(expectation) {
			return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);
		}

		function describeExpected(expected) {
			var descriptions = new Array(expected.length),
				i, j;

			for (i = 0; i < expected.length; i++) {
				descriptions[i] = describeExpectation(expected[i]);
			}

			descriptions.sort();

			if (descriptions.length > 0) {
				for (i = 1, j = 1; i < descriptions.length; i++) {
					if (descriptions[i - 1] !== descriptions[i]) {
						descriptions[j] = descriptions[i];
						j++;
					}
				}
				descriptions.length = j;
			}

			switch (descriptions.length) {
			case 1:
				return descriptions[0];

			case 2:
				return descriptions[0] + " or " + descriptions[1];

			default:
				return descriptions.slice(0, -1).join(", ")
            + ", or "
            + descriptions[descriptions.length - 1];
			}
		}

		function describeFound(found) {
			return found ? "\"" + literalEscape(found) + "\"" : "end of input";
		}

		return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";
	};

	function peg$parse(input, options) {
		options = options !== void 0 ? options : {};

		var peg$FAILED = {},

			peg$startRuleFunctions = { start: peg$parsestart },
			peg$startRuleFunction  = peg$parsestart,

			peg$c0 = "table",
			peg$c1 = peg$literalExpectation("table", false),
			peg$c2 = ".",
			peg$c3 = peg$literalExpectation(".", false),
			peg$c4 = ":",
			peg$c5 = peg$literalExpectation(":", false),
			peg$c6 = function(s, t, a, d) {return {s:s, t:t, a:a, d:d};},
			peg$c7 = "BEGIN",
			peg$c8 = peg$literalExpectation("BEGIN", false),
			peg$c9 = function(id) {return {trx:"BEGIN", xid:id};},
			peg$c10 = "COMMIT",
			peg$c11 = peg$literalExpectation("COMMIT", false),
			peg$c12 = function(id, tm) {return {trx:"COMMIT", xid:id, time:tm};},
			peg$c13 = /^[0-9]/,
			peg$c14 = peg$classExpectation([["0", "9"]], false, false),
			peg$c15 = function(t) {return t.join('');},
			peg$c16 = "(at ",
			peg$c17 = peg$literalExpectation("(at ", false),
			peg$c18 = /^[^)]/,
			peg$c19 = peg$classExpectation([")"], true, false),
			peg$c20 = ")",
			peg$c21 = peg$literalExpectation(")", false),
			peg$c22 = " ",
			peg$c23 = peg$literalExpectation(" ", false),
			peg$c24 = "[",
			peg$c25 = peg$literalExpectation("[", false),
			peg$c26 = "[]]",
			peg$c27 = peg$literalExpectation("[]]", false),
			peg$c28 = function(t) {return t+"[]";},
			peg$c29 = "]",
			peg$c30 = peg$literalExpectation("]", false),
			peg$c31 = function(t) {return t;},
			peg$c32 = "null",
			peg$c33 = peg$literalExpectation("null", false),
			peg$c34 = function() {return null;},
			peg$c35 = "''",
			peg$c36 = peg$literalExpectation("''", false),
			peg$c37 = function() {return;},
			peg$c38 = function(left, right) { return parseFloat(left.join("") + "." +   right.join("")); },
			peg$c39 = function(digits) { return parseInt(digits.join(""), 10); },
			peg$c40 = "\"",
			peg$c41 = peg$literalExpectation("\"", false),
			peg$c42 = /^[^"]/,
			peg$c43 = peg$classExpectation(["\""], true, false),
			peg$c44 = /^[\r\n]/,
			peg$c45 = peg$classExpectation(["\r", "\n"], false, false),
			peg$c46 = "\"\"",
			peg$c47 = peg$literalExpectation("\"\"", false),
			peg$c48 = function() {return "\"";},
			peg$c49 = function(t) {return t[0] ? t[0].join('') : '';},
			peg$c50 = "'",
			peg$c51 = peg$literalExpectation("'", false),
			peg$c52 = /^[^'\\]/,
			peg$c53 = peg$classExpectation(["'", "\\"], true, false),
			peg$c54 = "\\'",
			peg$c55 = peg$literalExpectation("\\'", false),
			peg$c56 = "\\\"",
			peg$c57 = peg$literalExpectation("\\\"", false),
			peg$c58 = "\\n",
			peg$c59 = peg$literalExpectation("\\n", false),
			peg$c60 = "\\t",
			peg$c61 = peg$literalExpectation("\\t", false),
			peg$c62 = function(t) {
        	return t.join('');
			},
			peg$c63 = /^[^.]/,
			peg$c64 = peg$classExpectation(["."], true, false),
			peg$c65 = /^[^ \t\r\n]/,
			peg$c66 = peg$classExpectation([" ", "\t", "\r", "\n"], true, false),
			peg$c67 = /^[^:]/,
			peg$c68 = peg$classExpectation([":"], true, false),
			peg$c69 = /^[^[]/,
			peg$c70 = peg$classExpectation(["["], true, false),
			peg$c71 = /^[^\][]/,
			peg$c72 = peg$classExpectation(["]", "["], true, false),
			peg$c73 = "INSERT",
			peg$c74 = peg$literalExpectation("INSERT", false),
			peg$c75 = "UPDATE",
			peg$c76 = peg$literalExpectation("UPDATE", false),
			peg$c77 = "DELETE",
			peg$c78 = peg$literalExpectation("DELETE", false),
			peg$c79 = function(f, t, v) {return {n:f, t:t, v:v};},
			peg$c80 = "(",
			peg$c81 = peg$literalExpectation("(", false),
			peg$c82 = /^[^))]/,
			peg$c83 = peg$classExpectation([")", ")"], true, false),
			peg$c84 = function(t) {return {type:"null", name:"message", value:t.join('')};},

			peg$currPos          = 0,
			peg$savedPos         = 0,
			peg$posDetailsCache  = [{ line: 1, column: 1 }],
			peg$maxFailPos       = 0,
			peg$maxFailExpected  = [],
			peg$silentFails      = 0,

			peg$result;

		if ("startRule" in options) {
			if (!(options.startRule in peg$startRuleFunctions)) {
				throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
			}

			peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
		}

		function text() {
			return input.substring(peg$savedPos, peg$currPos);
		}

		function location() {
			return peg$computeLocation(peg$savedPos, peg$currPos);
		}

		function expected(description, location) {
			location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

			throw peg$buildStructuredError(
				[peg$otherExpectation(description)],
				input.substring(peg$savedPos, peg$currPos),
				location
			);
		}

		function error(message, location) {
			location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);

			throw peg$buildSimpleError(message, location);
		}

		function peg$literalExpectation(text, ignoreCase) {
			return { type: "literal", text: text, ignoreCase: ignoreCase };
		}

		function peg$classExpectation(parts, inverted, ignoreCase) {
			return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };
		}

		function peg$anyExpectation() {
			return { type: "any" };
		}

		function peg$endExpectation() {
			return { type: "end" };
		}

		function peg$otherExpectation(description) {
			return { type: "other", description: description };
		}

		function peg$computePosDetails(pos) {
			var details = peg$posDetailsCache[pos], p;

			if (details) {
				return details;
			} else {
				p = pos - 1;
				while (!peg$posDetailsCache[p]) {
					p--;
				}

				details = peg$posDetailsCache[p];
				details = {
					line:   details.line,
					column: details.column
				};

				while (p < pos) {
					if (input.charCodeAt(p) === 10) {
						details.line++;
						details.column = 1;
					} else {
						details.column++;
					}

					p++;
				}

				peg$posDetailsCache[pos] = details;
				return details;
			}
		}

		function peg$computeLocation(startPos, endPos) {
			var startPosDetails = peg$computePosDetails(startPos),
				endPosDetails   = peg$computePosDetails(endPos);

			return {
				start: {
					offset: startPos,
					line:   startPosDetails.line,
					column: startPosDetails.column
				},
				end: {
					offset: endPos,
					line:   endPosDetails.line,
					column: endPosDetails.column
				}
			};
		}

		function peg$fail(expected) {
			if (peg$currPos < peg$maxFailPos) { return; }

			if (peg$currPos > peg$maxFailPos) {
				peg$maxFailPos = peg$currPos;
				peg$maxFailExpected = [];
			}

			peg$maxFailExpected.push(expected);
		}

		function peg$buildSimpleError(message, location) {
			return new peg$SyntaxError(message, null, null, location);
		}

		function peg$buildStructuredError(expected, found, location) {
			return new peg$SyntaxError(
				peg$SyntaxError.buildMessage(expected, found),
				expected,
				found,
				location
			);
		}

		function peg$parsestart() {
			var s0;

			s0 = peg$parsetable();
			if (s0 === peg$FAILED) {
				s0 = peg$parsetrx();
			}

			return s0;
		}

		function peg$parsetable() {
			var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 5) === peg$c0) {
				s1 = peg$c0;
				peg$currPos += 5;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c1); }
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsespace();
				if (s2 !== peg$FAILED) {
					s3 = peg$parseschema();
					if (s3 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 46) {
							s4 = peg$c2;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c3); }
						}
						if (s4 !== peg$FAILED) {
							s5 = peg$parsetablename();
							if (s5 !== peg$FAILED) {
								if (input.charCodeAt(peg$currPos) === 58) {
									s6 = peg$c4;
									peg$currPos++;
								} else {
									s6 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c5); }
								}
								if (s6 !== peg$FAILED) {
									s7 = peg$parsespace();
									if (s7 !== peg$FAILED) {
										s8 = peg$parseaction();
										if (s8 !== peg$FAILED) {
											if (input.charCodeAt(peg$currPos) === 58) {
												s9 = peg$c4;
												peg$currPos++;
											} else {
												s9 = peg$FAILED;
												if (peg$silentFails === 0) { peg$fail(peg$c5); }
											}
											if (s9 !== peg$FAILED) {
												s10 = peg$parsedata();
												if (s10 !== peg$FAILED) {
													peg$savedPos = s0;
													s1 = peg$c6(s3, s5, s8, s10);
													s0 = s1;
												} else {
													peg$currPos = s0;
													s0 = peg$FAILED;
												}
											} else {
												peg$currPos = s0;
												s0 = peg$FAILED;
											}
										} else {
											peg$currPos = s0;
											s0 = peg$FAILED;
										}
									} else {
										peg$currPos = s0;
										s0 = peg$FAILED;
									}
								} else {
									peg$currPos = s0;
									s0 = peg$FAILED;
								}
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsetrx() {
			var s0;

			s0 = peg$parsetrx_begin();
			if (s0 === peg$FAILED) {
				s0 = peg$parsetrx_commit();
			}

			return s0;
		}

		function peg$parsetrx_begin() {
			var s0, s1, s2;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 5) === peg$c7) {
				s1 = peg$c7;
				peg$currPos += 5;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c8); }
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsetrx_id();
				if (s2 === peg$FAILED) {
					s2 = null;
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c9(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsetrx_commit() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 6) === peg$c10) {
				s1 = peg$c10;
				peg$currPos += 6;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c11); }
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsetrx_id();
				if (s2 === peg$FAILED) {
					s2 = null;
				}
				if (s2 !== peg$FAILED) {
					s3 = peg$parsetrx_tm();
					if (s3 === peg$FAILED) {
						s3 = null;
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c12(s2, s3);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsetrx_id() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			s1 = peg$parsespace();
			if (s1 !== peg$FAILED) {
				s2 = [];
				if (peg$c13.test(input.charAt(peg$currPos))) {
					s3 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c14); }
				}
				if (s3 !== peg$FAILED) {
					while (s3 !== peg$FAILED) {
						s2.push(s3);
						if (peg$c13.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c14); }
						}
					}
				} else {
					s2 = peg$FAILED;
				}
				if (s2 !== peg$FAILED) {
					peg$savedPos = s0;
					s1 = peg$c15(s2);
					s0 = s1;
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsetrx_tm() {
			var s0, s1, s2, s3, s4;

			s0 = peg$currPos;
			s1 = peg$parsespace();
			if (s1 !== peg$FAILED) {
				if (input.substr(peg$currPos, 4) === peg$c16) {
					s2 = peg$c16;
					peg$currPos += 4;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c17); }
				}
				if (s2 !== peg$FAILED) {
					s3 = [];
					if (peg$c18.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c19); }
					}
					if (s4 !== peg$FAILED) {
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							if (peg$c18.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c19); }
							}
						}
					} else {
						s3 = peg$FAILED;
					}
					if (s3 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 41) {
							s4 = peg$c20;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c21); }
						}
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c15(s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsespace() {
			var s0, s1;

			s0 = [];
			if (input.charCodeAt(peg$currPos) === 32) {
				s1 = peg$c22;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c23); }
			}
			if (s1 !== peg$FAILED) {
				while (s1 !== peg$FAILED) {
					s0.push(s1);
					if (input.charCodeAt(peg$currPos) === 32) {
						s1 = peg$c22;
						peg$currPos++;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c23); }
					}
				}
			} else {
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parseschema() {
			var s0;

			s0 = peg$parsedouble_quote_escaped_string();
			if (s0 === peg$FAILED) {
				s0 = peg$parsedot_terminated_string();
			}

			return s0;
		}

		function peg$parsetablename() {
			var s0;

			s0 = peg$parsedouble_quote_escaped_string();
			if (s0 === peg$FAILED) {
				s0 = peg$parsecolon_terminated_string();
			}

			return s0;
		}

		function peg$parsefieldname() {
			var s0;

			s0 = peg$parsedouble_quote_escaped_string();
			if (s0 === peg$FAILED) {
				s0 = peg$parsebraket_start_terminated_string();
			}

			return s0;
		}

		function peg$parsedatatype() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 91) {
				s1 = peg$c24;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c25); }
			}
			if (s1 !== peg$FAILED) {
				s2 = peg$parsebraket_end_terminated_string();
				if (s2 !== peg$FAILED) {
					if (input.substr(peg$currPos, 3) === peg$c26) {
						s3 = peg$c26;
						peg$currPos += 3;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c27); }
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c28(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			if (s0 === peg$FAILED) {
				s0 = peg$currPos;
				if (input.charCodeAt(peg$currPos) === 91) {
					s1 = peg$c24;
					peg$currPos++;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c25); }
				}
				if (s1 !== peg$FAILED) {
					s2 = peg$parsebraket_end_terminated_string();
					if (s2 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 93) {
							s3 = peg$c29;
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c30); }
						}
						if (s3 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c31(s2);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			}

			return s0;
		}

		function peg$parsevalue() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 4) === peg$c32) {
				s1 = peg$c32;
				peg$currPos += 4;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c33); }
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c34();
			}
			s0 = s1;
			if (s0 === peg$FAILED) {
				s0 = peg$parsefloat();
				if (s0 === peg$FAILED) {
					s0 = peg$parseinteger();
					if (s0 === peg$FAILED) {
						s0 = peg$currPos;
						if (input.substr(peg$currPos, 2) === peg$c35) {
							s1 = peg$c35;
							peg$currPos += 2;
						} else {
							s1 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c36); }
						}
						if (s1 !== peg$FAILED) {
							s2 = peg$currPos;
							peg$silentFails++;
							if (input.charCodeAt(peg$currPos) === 32) {
								s3 = peg$c22;
								peg$currPos++;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c23); }
							}
							peg$silentFails--;
							if (s3 !== peg$FAILED) {
								peg$currPos = s2;
								s2 = void 0;
							} else {
								s2 = peg$FAILED;
							}
							if (s2 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c37();
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
						if (s0 === peg$FAILED) {
							s0 = peg$parsesingle_quote_escaped_string();
							if (s0 === peg$FAILED) {
								s0 = peg$parsespace_terminated_string();
							}
						}
					}
				}
			}

			return s0;
		}

		function peg$parsefloat() {
			var s0, s1, s2, s3, s4;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c13.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c14); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c13.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c14); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 46) {
					s2 = peg$c2;
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c3); }
				}
				if (s2 !== peg$FAILED) {
					s3 = [];
					if (peg$c13.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c14); }
					}
					if (s4 !== peg$FAILED) {
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							if (peg$c13.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c14); }
							}
						}
					} else {
						s3 = peg$FAILED;
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c38(s1, s3);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parseinteger() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c13.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c14); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c13.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c14); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c39(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsedouble_quote_escaped_string() {
			var s0, s1, s2, s3, s4;

			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 34) {
				s1 = peg$c40;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c41); }
			}
			if (s1 !== peg$FAILED) {
				s2 = [];
				s3 = [];
				if (peg$c42.test(input.charAt(peg$currPos))) {
					s4 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s4 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c43); }
				}
				if (s4 !== peg$FAILED) {
					while (s4 !== peg$FAILED) {
						s3.push(s4);
						if (peg$c42.test(input.charAt(peg$currPos))) {
							s4 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c43); }
						}
					}
				} else {
					s3 = peg$FAILED;
				}
				if (s3 === peg$FAILED) {
					if (peg$c44.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c45); }
					}
					if (s3 === peg$FAILED) {
						s3 = peg$currPos;
						if (input.substr(peg$currPos, 2) === peg$c46) {
							s4 = peg$c46;
							peg$currPos += 2;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c47); }
						}
						if (s4 !== peg$FAILED) {
							peg$savedPos = s3;
							s4 = peg$c48();
						}
						s3 = s4;
					}
				}
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					s3 = [];
					if (peg$c42.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c43); }
					}
					if (s4 !== peg$FAILED) {
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							if (peg$c42.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c43); }
							}
						}
					} else {
						s3 = peg$FAILED;
					}
					if (s3 === peg$FAILED) {
						if (peg$c44.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c45); }
						}
						if (s3 === peg$FAILED) {
							s3 = peg$currPos;
							if (input.substr(peg$currPos, 2) === peg$c46) {
								s4 = peg$c46;
								peg$currPos += 2;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c47); }
							}
							if (s4 !== peg$FAILED) {
								peg$savedPos = s3;
								s4 = peg$c48();
							}
							s3 = s4;
						}
					}
				}
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 34) {
						s3 = peg$c40;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c41); }
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c49(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsesingle_quote_escaped_string() {
			var s0, s1, s2, s3;

			s0 = peg$currPos;
			if (input.charCodeAt(peg$currPos) === 39) {
				s1 = peg$c50;
				peg$currPos++;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c51); }
			}
			if (s1 !== peg$FAILED) {
				s2 = [];
				if (peg$c52.test(input.charAt(peg$currPos))) {
					s3 = input.charAt(peg$currPos);
					peg$currPos++;
				} else {
					s3 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c53); }
				}
				if (s3 === peg$FAILED) {
					if (peg$c44.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c45); }
					}
					if (s3 === peg$FAILED) {
						if (input.substr(peg$currPos, 2) === peg$c54) {
							s3 = peg$c54;
							peg$currPos += 2;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c55); }
						}
						if (s3 === peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c35) {
								s3 = peg$c35;
								peg$currPos += 2;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c36); }
							}
							if (s3 === peg$FAILED) {
								if (input.substr(peg$currPos, 2) === peg$c56) {
									s3 = peg$c56;
									peg$currPos += 2;
								} else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c57); }
								}
								if (s3 === peg$FAILED) {
									if (input.substr(peg$currPos, 2) === peg$c58) {
										s3 = peg$c58;
										peg$currPos += 2;
									} else {
										s3 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c59); }
									}
									if (s3 === peg$FAILED) {
										if (input.substr(peg$currPos, 2) === peg$c60) {
											s3 = peg$c60;
											peg$currPos += 2;
										} else {
											s3 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c61); }
										}
									}
								}
							}
						}
					}
				}
				while (s3 !== peg$FAILED) {
					s2.push(s3);
					if (peg$c52.test(input.charAt(peg$currPos))) {
						s3 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c53); }
					}
					if (s3 === peg$FAILED) {
						if (peg$c44.test(input.charAt(peg$currPos))) {
							s3 = input.charAt(peg$currPos);
							peg$currPos++;
						} else {
							s3 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c45); }
						}
						if (s3 === peg$FAILED) {
							if (input.substr(peg$currPos, 2) === peg$c54) {
								s3 = peg$c54;
								peg$currPos += 2;
							} else {
								s3 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c55); }
							}
							if (s3 === peg$FAILED) {
								if (input.substr(peg$currPos, 2) === peg$c35) {
									s3 = peg$c35;
									peg$currPos += 2;
								} else {
									s3 = peg$FAILED;
									if (peg$silentFails === 0) { peg$fail(peg$c36); }
								}
								if (s3 === peg$FAILED) {
									if (input.substr(peg$currPos, 2) === peg$c56) {
										s3 = peg$c56;
										peg$currPos += 2;
									} else {
										s3 = peg$FAILED;
										if (peg$silentFails === 0) { peg$fail(peg$c57); }
									}
									if (s3 === peg$FAILED) {
										if (input.substr(peg$currPos, 2) === peg$c58) {
											s3 = peg$c58;
											peg$currPos += 2;
										} else {
											s3 = peg$FAILED;
											if (peg$silentFails === 0) { peg$fail(peg$c59); }
										}
										if (s3 === peg$FAILED) {
											if (input.substr(peg$currPos, 2) === peg$c60) {
												s3 = peg$c60;
												peg$currPos += 2;
											} else {
												s3 = peg$FAILED;
												if (peg$silentFails === 0) { peg$fail(peg$c61); }
											}
										}
									}
								}
							}
						}
					}
				}
				if (s2 !== peg$FAILED) {
					if (input.charCodeAt(peg$currPos) === 39) {
						s3 = peg$c50;
						peg$currPos++;
					} else {
						s3 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c51); }
					}
					if (s3 !== peg$FAILED) {
						peg$savedPos = s0;
						s1 = peg$c62(s2);
						s0 = s1;
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsedot_terminated_string() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c63.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c64); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c63.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c64); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c15(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsespace_terminated_string() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c65.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c66); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c65.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c66); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c15(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsecolon_terminated_string() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c67.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c68); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c67.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c68); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c15(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsebraket_start_terminated_string() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c69.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c70); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c69.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c70); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c15(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsebraket_end_terminated_string() {
			var s0, s1, s2;

			s0 = peg$currPos;
			s1 = [];
			if (peg$c71.test(input.charAt(peg$currPos))) {
				s2 = input.charAt(peg$currPos);
				peg$currPos++;
			} else {
				s2 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c72); }
			}
			if (s2 !== peg$FAILED) {
				while (s2 !== peg$FAILED) {
					s1.push(s2);
					if (peg$c71.test(input.charAt(peg$currPos))) {
						s2 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s2 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c72); }
					}
				}
			} else {
				s1 = peg$FAILED;
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c15(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parseaction() {
			var s0, s1;

			s0 = peg$currPos;
			if (input.substr(peg$currPos, 6) === peg$c73) {
				s1 = peg$c73;
				peg$currPos += 6;
			} else {
				s1 = peg$FAILED;
				if (peg$silentFails === 0) { peg$fail(peg$c74); }
			}
			if (s1 === peg$FAILED) {
				if (input.substr(peg$currPos, 6) === peg$c75) {
					s1 = peg$c75;
					peg$currPos += 6;
				} else {
					s1 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c76); }
				}
				if (s1 === peg$FAILED) {
					if (input.substr(peg$currPos, 6) === peg$c77) {
						s1 = peg$c77;
						peg$currPos += 6;
					} else {
						s1 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c78); }
					}
				}
			}
			if (s1 !== peg$FAILED) {
				peg$savedPos = s0;
				s1 = peg$c31(s1);
			}
			s0 = s1;

			return s0;
		}

		function peg$parsedatum() {
			var s0, s1, s2, s3, s4, s5;

			s0 = peg$currPos;
			s1 = peg$parsespace();
			if (s1 !== peg$FAILED) {
				s2 = peg$parsefieldname();
				if (s2 !== peg$FAILED) {
					s3 = peg$parsedatatype();
					if (s3 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 58) {
							s4 = peg$c4;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c5); }
						}
						if (s4 !== peg$FAILED) {
							s5 = peg$parsevalue();
							if (s5 !== peg$FAILED) {
								peg$savedPos = s0;
								s1 = peg$c79(s2, s3, s5);
								s0 = s1;
							} else {
								peg$currPos = s0;
								s0 = peg$FAILED;
							}
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}

			return s0;
		}

		function peg$parsedata() {
			var s0, s1, s2, s3, s4;

			s0 = peg$currPos;
			s1 = peg$parsespace();
			if (s1 !== peg$FAILED) {
				if (input.charCodeAt(peg$currPos) === 40) {
					s2 = peg$c80;
					peg$currPos++;
				} else {
					s2 = peg$FAILED;
					if (peg$silentFails === 0) { peg$fail(peg$c81); }
				}
				if (s2 !== peg$FAILED) {
					s3 = [];
					if (peg$c82.test(input.charAt(peg$currPos))) {
						s4 = input.charAt(peg$currPos);
						peg$currPos++;
					} else {
						s4 = peg$FAILED;
						if (peg$silentFails === 0) { peg$fail(peg$c83); }
					}
					if (s4 !== peg$FAILED) {
						while (s4 !== peg$FAILED) {
							s3.push(s4);
							if (peg$c82.test(input.charAt(peg$currPos))) {
								s4 = input.charAt(peg$currPos);
								peg$currPos++;
							} else {
								s4 = peg$FAILED;
								if (peg$silentFails === 0) { peg$fail(peg$c83); }
							}
						}
					} else {
						s3 = peg$FAILED;
					}
					if (s3 !== peg$FAILED) {
						if (input.charCodeAt(peg$currPos) === 41) {
							s4 = peg$c20;
							peg$currPos++;
						} else {
							s4 = peg$FAILED;
							if (peg$silentFails === 0) { peg$fail(peg$c21); }
						}
						if (s4 !== peg$FAILED) {
							peg$savedPos = s0;
							s1 = peg$c84(s3);
							s0 = s1;
						} else {
							peg$currPos = s0;
							s0 = peg$FAILED;
						}
					} else {
						peg$currPos = s0;
						s0 = peg$FAILED;
					}
				} else {
					peg$currPos = s0;
					s0 = peg$FAILED;
				}
			} else {
				peg$currPos = s0;
				s0 = peg$FAILED;
			}
			if (s0 === peg$FAILED) {
				s0 = [];
				s1 = peg$parsedatum();
				if (s1 !== peg$FAILED) {
					while (s1 !== peg$FAILED) {
						s0.push(s1);
						s1 = peg$parsedatum();
					}
				} else {
					s0 = peg$FAILED;
				}
			}

			return s0;
		}

		peg$result = peg$startRuleFunction();

		if (peg$result !== peg$FAILED && peg$currPos === input.length) {
			return peg$result;
		} else {
			if (peg$result !== peg$FAILED && peg$currPos < input.length) {
				peg$fail(peg$endExpectation());
			}

			throw peg$buildStructuredError(
				peg$maxFailExpected,
				peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,
				peg$maxFailPos < input.length
					? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)
					: peg$computeLocation(peg$maxFailPos, peg$maxFailPos)
			);
		}
	}

	return {
		SyntaxError: peg$SyntaxError,
		parse:       peg$parse
	};
})();
